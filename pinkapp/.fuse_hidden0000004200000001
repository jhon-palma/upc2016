# -*- encoding: utf-8 -*-
from django.shortcuts import render, render_to_response
from django.template import RequestContext
from .models import marca, perfume


def index(request):
	return render_to_response('index.html')


def marcas(request):
	marcas = marca.objects.all()
	return render_to_response('marcas.html',{'marcas': marcas}, context_instance = RequestContext(request))

from django.db.models import Q
from django.core.paginator import Paginator, EmptyPage, PageNotAnInteger
from django.http import Http404
def search(request):
    """view de los resultados de busqueda
    """
    lista = None
    filter = None
    if 'filter' in request.GET.keys():
        filter = request.GET['filter']
        
        detalle = False
        if  'marca' in request.GET:
        	qset = ( ( Q( generoPrincipal = filter) |
                Q( generoSecundario = filter)) &
                Q(marca_id = request.GET['marca'])
                )
        	listado = perfume.objects.filter(qset)
        	detalle = True
        	
        else:
        	qset = ( Q( generoPrincipal = filter) |
                Q( generoSecundario = filter)
                )
        	listado = marca.objects.filter(qset)

        paginador = Paginator( listado, 16)
        page = 1
        if 'page' in request.GET:
            page = request.GET['page']
        try:
            lista = paginador.page(page)
        except EmptyPage:
            lista = paginador.page( paginador.num_pages)
        except PageNotAnInteger:
            raise Http404("Pagina no encontrada")

        """
        Manera de realizar consultar por un criterio a la vez
        #buscamos por nombre del curso
        cursos = Course.objects.filter( name__icontains =  request.GET['filter'] )
        # Si no existen resultados buscarmos por precio
        if not cursos.exists():
            cursos = Course.objects.filter( price__icontains =  request.GET['filter'] )
        # Si no existen resultados buscarmos por profesor
        if not cursos.exists():
            cursos = Course.objects.filter( teacher__name__icontains =  request.GET['filter'] )
        filter = request.GET['filter']
        """


    return render_to_response('search.html', {'lista': lista, 'detalle': detalle, 'paginador': paginador, 'filtro': filter  }, context_instance = RequestContext(request))

def contacto(request):
    return render_to_response('contacto.html')


def comprar(request):
    perfume = None
    filter = None
    
    if 'filter' in request.GET.keys():
        filter = request.GET['filter']
        
        perfume=perfume.objects.get(id=filter)

        return render_to_response('comprar.html', {'producto':producto, 'filtro': filter}, context_instance = RequestContext(request))